{{>userHeader}}
{{>navBar2}}

<style>
    .form-control {
        background-color: #f8f9fa;
        border-color: #ced4da;
        color: #495057;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .container-fluid {
        background-color: #f8f9fa;
    }

    #map {
        height: 400px;
        margin-top: 20px;
    }

    .align-form-elements {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>

<!-- HOTEL -->
<div class="container-fluid" style="margin-top: 100px;">
    <div class="row m-5 py-5">
        <div class="col-lg-5 order-lg-2">
            <!-- Check-in form -->
            <div class="col-md-8 offset-md-2" data-aos="fade-up">
                <form id="checkin" class="align-form-elements mb-5">
                    <!-- Form inputs -->
                    <div class="form-group">
                        <label for="checkin">Check-in Date</label>
                        <input type="date" class="form-control" id="checkin" name="checkIn">
                        <span class="text-danger error-msg" id="checkInError"></span>
                    </div>
                    <div class="form-group">
                        <label for="checkout">Check-out Date</label>
                        <input type="date" class="form-control" id="checkout" name="checkOut">
                        <span class="text-danger error-msg" id="checkOutError"></span>
                    </div>
                    <button type="submit" class="btn btn-primary btn-sm">Submit</button>
                </form>
                {{#each hotel.amenities}}
                <p>{{this}}</p>
                {{/each}}
            </div>
        </div>
        <div class="col-lg-7 order-lg-1">
            <div class="super_container" style="height: 60vh;">
                <!-- Hotel image slider -->
                <div class="home">
                    <div class="home_slider_container">
                        <div class="owl-carousel owl-theme home_slider">
                            {{#each hotel.images}}
                            <div class="slide">
                                <img src="{{this.url}}" alt="Hotel Image">
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
            <div class="home_title h1 my-4">{{hotel.name}}</div>
            <p class="mb-4">{{hotel.description}}</p>

            <h4 class="my-4">Location: {{hotel.address}}</h4>
            <button id="navigateBtn" class="btn btn-primary">Navigate <i
                    class="fas fa-map-marker-alt ml-2"></i></button>
            <button class="btn btn-primary" onclick="return review()">Write a Review</button>
        </div>
    </div>
</div>
<!-- END HOTELS -->
{{!-- review--}}

<div class="testimonials">
    <div class="parallax_background parallax-window" data-parallax="scroll" data-image-src="images/testimonials.jpg"
        data-speed="0.8"></div>
    <div class="testimonials_overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="testimonials_slider_container">

                    <!-- Testimonials Slider -->
                    <div class="owl-carousel owl-theme test_slider">

                        <!-- Slide -->
                        <div class="test_slider_item text-center">
                            <div class="rating rating_5 d-flex flex-row align-items-start justify-content-center">
                                <i></i><i></i><i></i><i></i><i></i>
                            </div>
                            <div class="testimonial_title"><a href="#">Perfect Stay</a></div>
                            <div class="testimonial_text">
                                <p>Etiam nec odio vestibulum est mattis effic iturut magna. Pellentesque sit
                                    amet tellus blandit. Etiam nec odio vestibulum est mattis effic.</p>
                            </div>
                            <div class="testimonial_author"><a href="#">Samantha Smith</a>, Greece</div>
                        </div>

                        <!-- Slide -->
                        <div class="test_slider_item text-center">
                            <div class="rating rating_5 d-flex flex-row align-items-start justify-content-center">
                                <i></i><i></i><i></i><i></i><i></i>
                            </div>
                            <div class="testimonial_title"><a href="#">Nice place</a></div>
                            <div class="testimonial_text">
                                <p>Etiam nec odio vestibulum est mattis effic iturut magna. Pellentesque sit
                                    amet tellus blandit. Etiam nec odio vestibulum est mattis effic.</p>
                            </div>
                            <div class="testimonial_author"><a href="#">Michael Doe</a>, Italy</div>
                        </div>

                        <!-- Slide -->
                        <div class="test_slider_item text-center">
                            <div class="rating rating_5 d-flex flex-row align-items-start justify-content-center">
                                <i></i><i></i><i></i><i></i><i></i>
                            </div>
                            <div class="testimonial_title"><a href="#">We loved it</a></div>
                            <div class="testimonial_text">
                                <p>Etiam nec odio vestibulum est mattis effic iturut magna. Pellentesque sit
                                    amet tellus blandit. Etiam nec odio vestibulum est mattis effic.</p>
                            </div>
                            <div class="testimonial_author"><a href="#">Luis Garcia</a>, Spain</div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


{{!-- end review--}}



<div class="super_container my-5" style="margin-top: 100px;">
    <!-- Rooms section -->
    {{#each rooms}}
    <div class="container container1" style="margin-top: 50px;">
        <!-- Room image slider -->
        <div class="slider-container1">
            <div class="slider1">
                <div class="owl-carousel owl-theme home_slider">
                    {{#each this.images}}
                    <div class="slide"
                        style="height: 30vh; background-image: url({{this.url}}); background-size: cover;"></div>
                    {{/each}}
                </div>
            </div>
        </div>

        <div class="description-container1">
            <h5 class="bed-type">Bed Type: {{this.bed}}</h5>
            <p class="amenities">Amenities: {{this.amenities}}</p>
            <p class="cancellation">Cancellation: {{this.Cancellation}}</p>
        </div>

        <div class="booking-container1 d-flex align-items-center">
            <h5 class="price">Per night rs: {{this.price}}</h5>
            <a href="/hotel/room?id={{this._id}}" class="btn btn-primary btn-sm">Check Availability <i
                    class="fas fa-calendar-alt ml-2"></i></a>
        </div>
    </div>
    {{/each}}
</div>

<!-- Review Modal -->
<div class="modal" id="reviewModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Write a Review</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="reviewForm">
                    <div class="form-group">
                        <label for="rating">Rating:</label>
                        <!-- You can use star-rating library or create your own rating inputs -->
                        <input type="number" class="form-control" id="rating" name="rating" min="1" max="5" required>
                    </div>
                    <div class="form-group">
                        <label for="reviewText">Review:</label>
                        <textarea class="form-control" id="reviewText" name="reviewText" rows="4" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="submitReviewBtn">Submit</button>
            </div>
        </div>
    </div>
</div>



<!-- Mapbox map container -->
<div id="map"></div>

{{>userSiteFooter}}
{{>userFooter}}

<script src="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css" rel="stylesheet" />

<script>
    // Function to get user's current location
    function getUserLocation() {
        return new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject);
        });
    }

    // Handle form submission
    const handleSubmit = async (event) => {
        event.preventDefault();
        const formData = new FormData(event.target);

        try {
            const response = await axios.post('/hotel/checkin', Object.fromEntries(formData));
            resetError()
            if (response.status === 200) {
                document.body.innerHTML = response.data;
            }

        } catch (error) {
            if (error.response.status == 400) {

                const errors = error.response.data.error;
                Object.keys(errors).forEach((key) => {
                    let element = document.getElementById(key).textContent = errors[key];
                })
            }
            else if (error.response.status === 404) {
                alertify.alert("The rooms are not available for the given date", function () {
                    alertify.message('OK');
                });
            } else {
                alertify.alert("Something went wrong, please try again later", function () {
                    alertify.message('OK');
                });
            }
        }
    };

    // Add event listener to the form
    document.getElementById('checkin').addEventListener('submit', handleSubmit);

    // Mapbox access token
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXNsYW0yMiIsImEiOiJjbGs1ZHZqejYwZ3RhM2RudDQ0cmE1NDJuIn0.8MByk6wQU2kWJ60t4K0zIg';

    // Initialize the map
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        zoom: 14,
        center: [{{ hotel.longitude }}, {{ hotel.latitude }}]
    });

    // Add a marker for the hotel location
    new mapboxgl.Marker().setLngLat([{{ hotel.longitude }}, {{ hotel.latitude }}]).addTo(map);

    // Event listener for the navigate button
    // Event listener for the navigate button
    document.getElementById('navigateBtn').addEventListener('click', async () => {
        try {
            // Get user's current location
            const position = await getUserLocation();
            const userLatitude = position.coords.latitude;
            const userLongitude = position.coords.longitude;

            // Make a request to Mapbox Directions API
            const response = await axios.get(`https://api.mapbox.com/directions/v5/mapbox/driving/${userLongitude},${userLatitude};{{hotel.longitude}},{{hotel.latitude}}?access_token=${mapboxgl.accessToken}`);
            console.log(response.data)

            // Retrieve the navigation route
            const route = response.data.routes[0];
            const navigationPath = route.geometry

            function decodePolyline(polyline) {
                const poly = [];
                let index = 0,
                    len = polyline.length;
                let lat = 0,
                    lng = 0;

                while (index < len) {
                    let b, shift = 0,
                        result = 0;

                    do {
                        b = polyline.charAt(index++).charCodeAt(0) - 63;
                        result |= (b & 0x1f) << shift;
                        shift += 5;
                    } while (b >= 0x20);

                    let dlat = (result & 1) != 0 ? ~(result >> 1) : result >> 1;
                    lat += dlat;

                    shift = 0;
                    result = 0;

                    do {
                        b = polyline.charAt(index++).charCodeAt(0) - 63;
                        result |= (b & 0x1f) << shift;
                        shift += 5;
                    } while (b >= 0x20);

                    let dlng = (result & 1) != 0 ? ~(result >> 1) : result >> 1;
                    lng += dlng;

                    poly.push([lng / 1e5, lat / 1e5]);
                }

                return poly;
            }
            if (navigationPath && navigationPath.length > 0) {
                // Decode the polyline
                const decodedPath = decodePolyline(navigationPath);

                // Create a GeoJSON feature with the navigation path
                const navigationFeature = {
                    type: 'Feature',
                    properties: {},
                    geometry: {
                        type: 'LineString',
                        coordinates: decodedPath,
                    },
                };

                // Remove existing navigation source and layer if they exist
                if (map.getSource('navigation')) {
                    map.removeLayer('navigation');
                    map.removeSource('navigation');
                }

                // Add the navigation path to the map as a GeoJSON source and layer
                map.addSource('navigation', {
                    type: 'geojson',
                    data: navigationFeature,
                });

                map.addLayer({
                    id: 'navigation',
                    type: 'line',
                    source: 'navigation',
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round',
                    },
                    paint: {
                        'line-color': '#0074D9',
                        'line-width': 3,
                    },
                });

                // Fit the map to display the entire navigation path
                const bounds = new mapboxgl.LngLatBounds();
                decodedPath.forEach((point) => bounds.extend(point));
                map.fitBounds(bounds, { padding: 50 });
            } else {
                console.log('Navigation path is undefined or empty.');
                alert('Unable to retrieve navigation path. Please try again.');
            }
        } catch (error) {
            console.log('Error occurred while getting user location or retrieving navigation:', error);
            alert(
                'Unable to get user location or retrieve navigation. Please make sure location access is allowed and try again.'
            );
        }
    });

    function resetError() {
        const errorElements = document.querySelectorAll(".error-msg");
        errorElements.forEach((element) => {
            element.textContent = "";
        });
    }
</script>

<script>
    // Show the review modal when status 200 is received in the review function
    function showReviewModal() {
        const reviewModal = document.getElementById('reviewModal');
        const submitReviewBtn = document.getElementById('submitReviewBtn');

        submitReviewBtn.addEventListener('click', async () => {
            try {
                const rating = document.getElementById('rating').value;
                const reviewText = document.getElementById('reviewText').value;

                // Send the rating and review text to the server using axios POST request
                const response = await axios.post('/hotel/review', {
                    rating: rating,
                    reviewText: reviewText
                });

                if (response.status === 200) {
                    alertify.alert("Review submitted successfully", function () {
                        alertify.message('OK');
                        reviewModal.style.display = 'none';
                    });
                } else {
                    alertify.alert("Failed to submit review", function () {
                        alertify.message('OK');
                    });
                }
            } catch (error) {
                alertify.alert("Something went wrong, please try again later", function () {
                    alertify.message('OK');
                });
            }
        });

        reviewModal.style.display = 'block';
    }

    async function review() {
        event.preventDefault()
        try {
            const response = await axios.get('/hotel/review', {
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.status === 200) {
                showReviewModal();
            }
        } catch (error) {
            if (error.response.status == 401) {
                alertify.alert("You can't write the review", function () {
                    alertify.message('OK');
                });
            } else {
                alertify.alert("Something went wrong", function () {
                    alertify.message('OK');
                });
            }
        }
    }

</script>