{{>userHeader}}
{{>navBar2}}

<style>
    /* Styles for other elements */

    /* Map container */
    #map {
        height: 400px;
        margin-top: 20px;
    }
</style>

<!-- HOTEL -->
<div class="container-fluid" style="margin-top: 100px;">
    <div class="row m-5 py-5">
        <div class="col-lg-5 order-lg-2">
            <!-- Check-in form -->
            <div class="col-md-8 offset-md-2" data-aos="fade-up">
                <form id="checkin">
                    <!-- Form inputs -->
                    <div class="form-group">
                        <label for="checkin">Check-in Date</label>
                        <input type="date" class="form-control" id="checkin" name="checkIn">
                    </div>
                    <div class="form-group">
                        <label for="checkout">Check-out Date</label>
                        <input type="date" class="form-control" id="checkout" name="checkOut">
                    </div>
                    <button type="submit" class="btn btn-primary btn-sm">Submit</button>
                </form>
            </div>
        </div>
        <div class="col-lg-7 order-lg-1">
            <div class="super_container" style="height: 60vh;">
                <!-- Hotel image slider -->
                <div class="home">
                    <div class="home_slider_container">
                        <div class="owl-carousel owl-theme home_slider">
                            {{#each hotel.images}}
                            <div class="slide">
                                <img src="{{this.url}}" alt="Hotel Image">
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
            <div class="home_title h1 my-4">{{hotel.name}}</div>
            <p class="mb-4">{{hotel.description}}</p>
            <h4 class="mb-4">Location: {{hotel.address}}</h4>
            <button id="navigateBtn" class="btn btn-primary">Navigate <i
                    class="fas fa-map-marker-alt ml-2"></i></button>
        </div>
    </div>
</div>
<!-- END HOTELS -->

<div class="super_container my-5" style="margin-top: 100px;">
    <!-- Rooms section -->
    {{#each rooms}}
    <div class="container container1" style="margin-top: 50px;">
        <!-- Room image slider -->
        <div class="slider-container1">
            <div class="slider1">
                <div class="owl-carousel owl-theme home_slider">
                    {{#each this.images}}
                    <div class="slide"
                        style="height: 30vh; background-image: url({{this.url}}); background-size: cover;"></div>
                    {{/each}}
                </div>
            </div>
        </div>
        <!-- Room description -->
        <div class="description-container1">
            <h5 class="bed-type">Bed Type: {{this.bed}}</h5>
            <p class="amenities">Amenities: {{this.amenities}}</p>
            <p class="cancellation">Cancellation: {{this.Cancellation}}</p>
        </div>
        <!-- Booking details -->
        <div class="booking-container1 d-flex align-items-center">
            <h5 class="rooms-left">Rooms left: {{this.noOfRooms}}</h5>
            <h5 class="price">Starts From RS{{this.price}}</h5>
            <a href="/hotel/room?id={{this._id}}" class="btn btn-primary btn-sm">Check Availability <i
                    class="fas fa-calendar-alt ml-2"></i></a>
        </div>
    </div>
    {{/each}}
</div>

<!-- Mapbox map container -->
<div id="map"></div>
<div id="navigationInstructions"></div>

{{>userSiteFooter}}
{{>userFooter}}

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
    // Function to get user's current location
    function getUserLocation() {
        return new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject);
        });
    }

    // Handle form submission
    const handleSubmit = async (event) => {
        event.preventDefault();
        const formData = new FormData(event.target);

        try {
            const response = await axios.post('/hotel/checkin', Object.fromEntries(formData));
            if (response.status === 200) {
                document.body.innerHTML = response.data;
            }
        } catch (error) {
            if (error.response.status === 404) {
                alertify.alert("The rooms are not available for the given date", function () {
                    alertify.message('OK');
                });
            } else {
                alertify.alert("Something went wrong, please try again later", function () {
                    alertify.message('OK');
                });
            }
        }
    };

    // Add event listener to the form
    document.getElementById('checkin').addEventListener('submit', handleSubmit);

    // Mapbox access token
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXNsYW0yMiIsImEiOiJjbGs1ZHZqejYwZ3RhM2RudDQ0cmE1NDJuIn0.8MByk6wQU2kWJ60t4K0zIg';

    // Initialize the map
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        zoom: 14,
        center: [{{ hotel.longitude }}, {{ hotel.latitude }}]
    });

    // Add a marker for the hotel location
    new mapboxgl.Marker().setLngLat([{{ hotel.longitude }}, {{ hotel.latitude }}]).addTo(map);

    // Event listener for the navigate button
    document.getElementById('navigateBtn').addEventListener('click', async () => {
        try {
            // Get user's current location
            const position = await getUserLocation();
            const userLatitude = position.coords.latitude;
            const userLongitude = position.coords.longitude;
            alert(userLongitude)
            // Calculate the route using Mapbox Directions API
            const response = await axios.get(`https://api.mapbox.com/directions/v5/mapbox/driving/${userLongitude},${userLatitude};${{ hotel.latitude }},${{ hotel.longitude }}`, {
                params: {
                    access_token: mapboxgl.accessToken,
                }
            });

            // Extract the route information
            const { routes } = response.data;

            if (routes.length > 0) {
                const route = routes[0];

                // Display the navigation instructions on the map
                map.addLayer({
                    id: 'route',
                    type: 'line',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'Feature',
                            properties: {},
                            geometry: route.geometry,
                        },
                    },
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round',
                    },
                    paint: {
                        'line-color': '#007bff',
                        'line-width': 8,
                    },
                });

                // Fit the map to show the entire route
                const bounds = new mapboxgl.LngLatBounds();
                route.geometry.coordinates.forEach((coord) => {
                    bounds.extend(coord);
                });
                map.fitBounds(bounds, { padding: 40 });

                // Display the navigation steps as a list
                const instructionsContainer = document.getElementById('navigationInstructions');
                instructionsContainer.innerHTML = '';

                route.legs.forEach((leg) => {
                    leg.steps.forEach((step) => {
                        const instruction = document.createElement('p');
                        instruction.textContent = step.maneuver.instruction;
                        instructionsContainer.appendChild(instruction);
                    });
                });
            }
        } catch (error) {
            console.log('Error occurred while getting user location or route:', error);
            alert('Unable to get user location or retrieve route information. Please make sure location access is allowed and try again.');
        }
    });
</script>