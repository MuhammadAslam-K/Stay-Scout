{{>userHeader}}
{{>dashbordSide}}

<style>
    <style>.boost-container {
        display: flex;
        align-items: center;
    }

    .boost-arrow {
        border: none;
        background-color: transparent;
        cursor: pointer;
    }

    .boost-value {
        margin: 0 10px;
    }
</style>
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.1/css/jquery.dataTables.min.css">




<body id="page-top">
    <div id="wrapper">
        <div id="content-wrapper" class="d-flex flex-column">
            <div id="content">
                <nav
                    class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow justify-content-between">
                </nav>
                <div class="container-fluid">
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h4 class="m-0 font-weight-bold text-primary">HOTELS</h3>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Total Revenue</th>
                                            <th>No of Rooms</th>
                                            <th>Boost</th>
                                            <th>Type</th>
                                            <th>Is Available</th>
                                            <th>Block</th>
                                            <th>View Rooms</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {{#each hotel}}
                                        <tr>
                                            <td>{{this.name}}</td>
                                            <td>{{this.revenue}}</td>
                                            <td>{{this.rooms}}</td>
                                            <td>
                                                <div class="boost-container">
                                                    <button class="boost-arrow increment"
                                                        onclick="changeBoost('{{this._id}}', 'increment')">&#9650;</button>
                                                    <span id="boostValue{{this._id}}"
                                                        class="boost-value">{{this.booste}}</span>
                                                    <button class="boost-arrow decrement"
                                                        onclick="changeBoost('{{this._id}}', 'decrement')">&#9660;</button>
                                                </div>
                                            </td>


                                            <td>{{this.type.name}}</td>
                                            <td>{{this.is_Available}}</td>
                                            <td>
                                                <div id="blockButton{{this._id}}">
                                                    {{#if this.is_block}}
                                                    <button class="btn btn-warning btn-block"
                                                        onclick="toggleBlock('{{this._id}}', false)">Unblock</button>
                                                    {{else}}
                                                    <button class="btn btn-primary btn-block"
                                                        onclick="toggleBlock('{{this._id}}', true)">Block</button>
                                                    {{/if}}
                                                </div>
                                            </td>
                                            <td>
                                                <a href="/admin/owner/hotel/rooms?id={{this._id}}"
                                                    class="btn btn-primary">Rooms</a>
                                            </td>
                                        </tr>
                                        {{/each}}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="container d-flex justify-content-center mt-3">
                        <div class="btn-group" role="group" aria-label="View Options">
                            <button type="button" class="btn btn-secondary" id="yearBtn">Year</button>
                            <button type="button" class="btn btn-secondary" id="monthBtn">Month</button>
                            <button type="button" class="btn btn-secondary" id="weekBtn">Week</button>
                        </div>
                    </div>

                    <div class="container d-flex justify-content-center mt-5" style="width: 90%;">
                        <div style="width: 100%;">
                            <canvas id="revenueChart"></canvas>
                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>
</body>

</html>


{{>userFooter}}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.11.1/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


{{!-- GRAPH REVENU --}}
<script>
    document.addEventListener("DOMContentLoaded", async function () {
        let lineChart;

        const updateChartData = async (view) => {
            try {
                let timeUnit;
                switch (view) {
                    case 'year':
                        timeUnit = '$year';
                        break;
                    case 'month':
                        timeUnit = '$month';
                        break;
                    case 'week':
                        timeUnit = '$week';
                        break;
                    default:
                        timeUnit = '$month'; // Default to 'month' view
                        break;
                }

                // Make an asynchronous HTTP GET request to fetch revenue data based on the selected view
                const response = await axios.get(`/admin/owner/revenue?view=${view}`);

                // Extract data from the response
                const data = response.data;
                console.log(data)
                console.log(data.labels)

                // Update the chart data for line chart
                lineChart.data.labels = data.labels;
                lineChart.data.datasets[0].data = data.revenue;

                // Update the x-axis title based on the selected view
                lineChart.options.scales.x.title.text = `${view.charAt(0).toUpperCase()}${view.slice(1)}`;

                // Re-render the chart
                lineChart.update();

            } catch (error) {
                console.log(error)
            }
        };

        // Add event listeners for the view selection buttons
        document.getElementById('yearBtn').addEventListener('click', () => updateChartData('year'));
        document.getElementById('monthBtn').addEventListener('click', () => updateChartData('month'));
        document.getElementById('weekBtn').addEventListener('click', () => updateChartData('week'));

        // Initially load the chart with the default 'month' view
        await updateChartData('month');

        try {
            // Make an asynchronous HTTP GET request to fetch revenue data
            const response = await axios.get('/admin/owner/revenue');

            const data = response.data;
            const lineChartData = {
                labels: data.labels,
                datasets: [{
                    label: 'Revenue',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    data: data.revenue,
                    fill: true,
                }]
            };

            // Get the chart context
            const ctx = document.getElementById('revenueChart').getContext('2d');

            // Create the line chart with a logarithmic y-axis scale
            lineChart = new Chart(ctx, {
                type: 'line',
                data: lineChartData,
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'Revenue Chart',
                            font: {
                                size: 20
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return 'â‚¹' + context.parsed.y.toFixed(2);
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Months and Years',
                                font: {
                                    size: 16
                                }
                            }
                        },
                        y: {
                            type: 'logarithmic', // Set the y-axis scale to logarithmic
                            title: {
                                display: true,
                                text: 'Revenue (INR)',
                                font: {
                                    size: 16
                                }
                            },
                            ticks: {
                                callback: function (value) {
                                    return 'â‚¹' + value.toLocaleString(); // Format tick labels as rupee values
                                }
                            }
                        }
                    }
                }
            });

            // Add interactivity: Update the chart on window resize
            window.addEventListener('resize', function () {
                lineChart.resize();
            });

        } catch (error) {
            // Handle errors in case the data retrieval fails
            console.log('Failed to fetch revenue data:', error);
        }
    });
</script>






<script>
    $(document).ready(function () {
        $('#dataTable').DataTable();
    });

    function toggleBlock(hotelId, blockStatus) {
        event.preventDefault();
        axios.post('/admin/hotel/block?id=' + hotelId, {
            availability: blockStatus
        })
            .then(function (response) {
                // Handle the response here, if needed
                const blockButton = document.getElementById('blockButton' + hotelId);
                if (blockStatus) {
                    blockButton.innerHTML = '<button class="btn btn-warning btn-block" onclick="toggleBlock(\'' + hotelId + '\', false)">Unblock</button>';
                } else {
                    blockButton.innerHTML = '<button class="btn btn-primary btn-block" onclick="toggleBlock(\'' + hotelId + '\', true)">Block</button>';
                }
            })
            .catch(function (error) {
                alertify.alert("Something went wrong", function () {
                    alertify.message('OK');
                });
                console.log(error);
            });
    }


</script>

<script>
    // ...

    function changeBoost(hotelId, action) {
        event.preventDefault();
        const boostValueElement = document.getElementById('boostValue' + hotelId);
        let boostValue = parseInt(boostValueElement.innerHTML);

        if (action === 'increment') {
            boostValue++;
        } else if (action === 'decrement') {
            if (boostValue > 0) {
                boostValue--;
            }
        }

        axios.post('/admin/hotel/boost?id=' + hotelId, {
            boost: boostValue
        })

            .then(function (response) {
                // Handle the response here, if needed
                boostValueElement.innerHTML = boostValue;
            })
            .catch(function (error) {
                console.log(error);
                alertify.alert("Something went wrong", function () {
                    alertify.message('OK');
                });
            });
    }

    // ...
</script>